name: Bump version

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  detect-current-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.detect-current-version.outputs.version }}

    steps:
    - uses: actions/checkout@v3

    - name: detect current version
      id: detect-current-version
      env:
        VERSION_LINE_PREFIX: ";; Version: "
      run: |
        version=$(grep "^${VERSION_LINE_PREFIX}" kibela.el | sed -e "s/^${VERSION_LINE_PREFIX}//")
        echo $version
        echo "version=${version}">> $GITHUB_OUTPUT

  detect-prs:
    needs: detect-current-version
    runs-on: ubuntu-latest
    outputs:
      pull_request_numbers: ${{ steps.detect-prs.outputs.pull_request_numbers }}

    steps:
    - uses: actions/checkout@v3

    - name: detect merged pull requests
      id: detect-prs
      shell: bash
      run: |
        git fetch origin main
        git fetch -t
        touch prs.txt
        merged_refs=$(git log --merges --pretty=format:%P refs/tags/v${{ needs.detect-current-version.outputs.version }}..origin/main | cut -d ' ' -f 2)
        IFS=$'\n' pr_refs=$(git ls-remote origin refs/pull/*/head)
        for merged_ref in $merged_refs
        do
          for pr_ref in $pr_refs
          do
            ref=$(echo $pr_ref | awk '{print $1}')
            if [ $ref == $merged_ref ]; then
              pr=$(echo $pr_ref | awk '{print $2}' | sed -e 's|^refs/pull/||' -e 's|/head$||')
              echo $pr >> prs.txt
            fi
          done
        done

        prs=$(cat prs.txt | jq -R -s -c 'split("\n")[:-1]')
        echo "prs=${prs}"
        echo "pull_request_numbers=${prs}" >> $GITHUB_OUTPUT

  detect-labels:
    needs: detect-prs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pr_number: ${{fromJson(needs.detect-prs.outputs.pull_request_numbers)}}
    steps:
      - name: detect labels
        id: detect-labels
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')

            const result = await github.rest.pulls.get({
              pull_number: ${{matrix.pr_number}},
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const tags = result.data.labels.map((label) => label.name).join("\n") + "\n"

            fs.writeFileSync("${{ github.workspace }}/tags.txt", tags)
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: pr-${{matrix.pr_number}}-labels
          path: ${{ github.workspace }}/tags.txt

  select-version:
    needs:
      - detect-current-version
      - detect-labels
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.output-version.outputs.version }}

    steps:
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: install semver
        run: npm install -g semver

      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          path: matrix-tags
      - name: merge
        run: |
          echo "labels=$(cat matrix-tags/*/*.txt | sort | uniq | jq -R -s -c 'split("\n")[:-1]')"
          echo "labels=$(cat matrix-tags/*/*.txt | sort | uniq | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_ENV

      - name: detect other changes
        run: |
          other_changes=$(echo '${{ env.labels }}' | jq .[] | grep -v "breaking change" | grep -v "enhancement" | grep -v "bug")
          if [ -n "$other_changes" ]; then
            echo "other_changes=1" >> $GITHUB_ENV
          fi

      - name: found other changes
        if: ${{ env.other_changes }}
        run: |
          echo "version=$(semver -i patch ${{ needs.detect-current-version.outputs.version }})"
          echo "version=$(semver -i patch ${{ needs.detect-current-version.outputs.version }})" >> $GITHUB_ENV

      - name: detect bug fixes
        run: |
          bug_fixes=$(echo '${{ env.labels }}' | jq .[] | sed -n -E -e '/bug/p')
          if [ -n "$bug_fixes" ]; then
            echo "bug_fixes=1" >> $GITHUB_ENV
          fi
      - name: found bug fixes
        if: ${{ env.bug_fixes }}
        run: |
          echo "version=$(semver -i patch ${{ needs.detect-current-version.outputs.version }})"
          echo "version=$(semver -i patch ${{ needs.detect-current-version.outputs.version }})" >> $GITHUB_ENV

      - name: detect new features
        run: |
          new_features=$(echo '${{ env.labels }}' | jq .[] | sed -n -E -e '/enhancement/p')
          echo $new_features
          if [ -n "$new_features" ]; then
            echo "new_features=1" >> $GITHUB_ENV
          fi
      - name: found new features
        if: ${{ env.new_features }}
        run: |
          echo "version=$(semver -i minor ${{ needs.detect-current-version.outputs.version }})"
          echo "version=$(semver -i minor ${{ needs.detect-current-version.outputs.version }})" >> $GITHUB_ENV

      - name: detect breaking changes
        shell: bash
        run: |
          echo "start breaking changes"
          breaking_changes=$(echo '${{ env.labels }}' | jq .[] | sed -n -E -e '/breaking change/p')
          echo "breaking changes processing"
          echo "; $breaking_changes"
          if [ -n "$breaking_changes" ]; then
            echo "if breaking changes"
            echo "breaking_changes=1" >> $GITHUB_ENV
          fi
      - name: found breaking changes
        if: ${{ env.breaking_changes }}
        run: |
          echo "version=$(semver -i major ${{ needs.detect-current-version.outputs.version }})"
          echo "version=$(semver -i major ${{ needs.detect-current-version.outputs.version }})" >> $GITHUB_ENV

      - name: output
        id: output-version
        run: |
          echo "version=${{ env.version }}"
          echo "version=${{ env.version }}" >> $GITHUB_OUTPUT

  bump-version:
    needs:
      - select-version
      - detect-current-version
    runs-on: ubuntu-latest
    if: ${{ needs.select-version.outputs.version != needs.detect-current-version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: bump version
        run: |
          sed -i -e "s/^;; Version: .*/;; Version: ${{ needs.select-version.outputs.version }}/" kibela.el
          sed -i -e "2s/${{ needs.detect-current-version.outputs.version }}/${{ needs.select-version.outputs.version }}/" Eask
          git add kibela.el Eask

      - uses: peter-evans/create-pull-request@v4
        with:
          title: Bump version from ${{ needs.detect-current-version.version }} to ${{ needs.select-version.version }}
          branch: bump-version-${{ needs.select-version.outputs.version }}
          base: main
