(require 'kibela-markdown-mode)
(require 'ert)
(require 'ert-x)

(ert-deftest test-kiblela-markdown-mode--show-to-edit/change-to-edit-mode ()
  (let* ((messages nil)
         (note '((id . "NoteID")
                 (title . "other user's note")
                 (content . "posted content")
                 (coediting . nil)
                 (groups . (((id . "GroupID1")
                             (name . "Home"))))
                 (folders . ())))
         (kibela-note-base (copy-alist note))
         (kibela-note-can-be-updated t)
         (kibela-note-groups '(((id . "GroupID1")
                                (name . "Home"))))
         (kibela-note-folders '(((id . "FolderID1")
                                  (folderName . "foo/bar")
                                  (group . ((id . "GroupID1")
                                            (name . "Home")))))))
    (with-temp-buffer
      (insert (concat "# " (assoc-default 'title note) "\n\n" (assoc-default 'content note)))
      (kibela-markdown-view-mode)
      (ert-with-message-capture messages
        (kibela-markdown--show-to-edit)
        (should (string-equal header-line-format "Home > foo > bar"))
        (should (string-equal major-mode "kibela-markdown-mode"))
        (should (string-empty-p messages))))))

(ert-deftest test-kiblela-markdown-mode--show-to-edit/blocked-when-no-permission ()
  (let* ((messages nil)
         (note '((id . "NoteID")
                 (title . "other user's note")
                 (content . "posted content")
                 (coediting . nil)
                 (groups . (((id . "GroupID1")
                             (name . "Home"))))
                 (folders . ())))
         (kibela-note-base (copy-alist note))
         (kibela-note-can-be-updated nil))
    (with-temp-buffer
      (insert (concat "# " (assoc-default 'title note) "\n\n" (assoc-default 'content note)))
      (kibela-markdown-view-mode)
      (ert-with-message-capture messages
        (kibela-markdown--show-to-edit)
        (should (string-equal major-mode "kibela-markdown-view-mode"))
        (should (string-equal (string-trim messages) "cannot edit this note."))))))

(ert-deftest test-kiblela-markdown-mode--kill-edit-buffer/restore-header-line ()
  (let* ((messages nil)
         (note '((id . "NoteID")
                 (title . "other user's note")
                 (content . "posted content")
                 (coediting . nil)
                 (url . "htts://dummy.example.com")
                 (groups . (((id . "GroupID1")
                             (name . "Home"))))
                 (folders . (((id . "FolderID1")
                                  (folderName . "foo/bar")
                                  (group . ((id . "GroupID1")
                                            (name . "Home"))))))))
         (kibela-note-base (copy-alist note))
         (kibela-note-can-be-updated t)
         (kibela-note-groups '(((id . "GroupID1")
                                (name . "Home"))))
         (kibela-note-folders '(((id . "FolderID1")
                                  (folderName . "foo/bar")
                                  (group . ((id . "GroupID1")
                                            (name . "Home")))))))
    (with-temp-buffer
      (insert (concat "# " (assoc-default 'title note) "\n\n" (assoc-default 'content note)))
      (kibela-markdown-mode)
      (ert-with-message-capture messages
        (kibela-markdown--kill-edit-buffer)
        (should (string-equal major-mode "kibela-markdown-view-mode"))
        (should (string-equal header-line-format "Home > foo > bar"))
        (should (string-empty-p messages))))))
